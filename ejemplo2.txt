import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, query, serverTimestamp } from 'firebase/firestore';

// Define the Firebase configuration and app ID from global variables
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;


// Google Geocoding API Key
const GOOGLE_MAPS_API_KEY = 'AIzaSyA1UksWl_uTYZlU6lYkPJjlcs1ZFQyO7tw'; // User provided API key

// Lista de empresas predefinidas
const predefinedCompanies = [
    { id: '0028115d-3b93-4148-bd46-cce04c03e981', name: 'FIBRA HUMANA MDQ' },
    { id: '028b3633-53b6-4d07-aa9f-5680910bdcd0', name: 'Federada Farmacia' },
    { id: '1b81e9b2-4cee-4b40-a47e-553d3507f014', name: 'Social Luro Farmacia' },
    { id: '2bb53100-6a53-4bfe-8ccf-373ef78046e0', name: 'Riddlersuplementos' },
    { id: '5528fc52-c631-4629-85a4-373f195d9060', name: 'EL CÓNDOR' },
    { id: '5aa8c898-e22a-40e2-911b-08d4b9daa2d5', name: 'Chuladas Store' },
    { id: '5e04d886-2b3e-4144-ac8d-0b48c40c0d4b', name: 'NUTRISABOR (Viandas)' },
    { id: 'a9bf9031-9ad0-4587-9ce3-ee68a0cc92b2', name: 'Arya - accesorios y complementos' },
    { id: 'b999f3f7-8b67-4ccb-b4f3-14e12137ad69', name: 'PICADACLUB - Tablas de Picadas' },
    { id: 'f83994e7-3f9d-4ff4-a9dc-fa7a831b9f14', name: 'MARIELA PASHER' },
    { id: 'fec850dc-f37a-4acb-bb21-2033fd61240f', name: 'EL CÓNDOR Avenida Colón & Neuquén' },
];

function App() {
    const [csvInput, setCsvInput] = useState('');
    const [deliveries, setDeliveries] = useState([]);
    const [parsedDeliveries, setParsedDeliveries] = useState([]); // State for parsed and geocoded data from CSV
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState('');
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [llmGenerating, setLlmGenerating] = useState(false); // State for LLM loading
    const [llmResponseMessage, setLlmResponseMessage] = useState(''); // State for LLM response message

    const [showEmpresaIdModal, setShowEmpresaIdModal] = useState(false); // State for showing the modal for Supabase CSV
    const [empresaIdInput, setEmpresaIdInput] = useState(''); // State for empresa_id input for Supabase CSV

    // New states for manual client addition
    const [newClientName, setNewClientName] = useState('');
    const [newClientAddress, setNewClientAddress] = useState('');
    const [manualClientsToSave, setManualClientsToSave] = useState([]); // Clients added manually before saving to Firestore
    const [showManualEmpresaIdModal, setShowManualEmpresaIdModal] = useState(false); // Modal for manual clients' empresa_id for Firestore save
    const [manualEmpresaIdInput, setManualEmpresaIdInput] = useState(''); // Input for manual clients' empresa_id for Firestore save

    // New states for manual client CSV export
    const [showManualClientsCsvModal, setShowManualClientsCsvModal] = useState(false); // Modal for manual clients CSV export
    const [manualClientsCsvEmpresaIdInput, setManualClientsCsvEmpresaIdInput] = useState(''); // Input for manual clients CSV empresa_id

    // Ref for the message box timeout
    const messageTimeoutRef = useRef(null);
    const llmMessageTimeoutRef = useRef(null); // Ref for LLM message timeout

    // Initialize Firebase and set up authentication listener
    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestoreDb = getFirestore(app);
            const firebaseAuth = getAuth(app);

            setDb(firestoreDb);
            setAuth(firebaseAuth);

            // Listen for authentication state changes
            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    // Sign in anonymously if no user is authenticated and no custom token is provided
                    // Or sign in with custom token if provided
                    if (initialAuthToken) {
                        try {
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                            // User is now set, onAuthStateChanged will trigger again with user
                        } catch (error) {
                            console.error("Error signing in with custom token:", error);
                            showMessage("Error al iniciar sesión con token personalizado. Intentando anónimo.");
                            await signInAnonymously(firebaseAuth); // Fallback to anonymous
                        }
                    } else {
                        await signInAnonymously(firebaseAuth);
                    }
                }
                setIsAuthReady(true); // Set auth ready after attempting sign-in
            });
            
            // Initial check for user if already signed in (e.g. page refresh)
            if (firebaseAuth.currentUser) {
                 setUserId(firebaseAuth.currentUser.uid);
                 setIsAuthReady(true);
            }


            return () => unsubscribe(); // Clean up the auth listener
        } catch (error) {
            console.error("Error initializing Firebase:", error);
            showMessage("Error al inicializar Firebase.");
            setLoading(false);
            setIsAuthReady(true); // Still set auth ready to allow app to proceed if Firebase fails partially
        }
    }, []);

    // Fetch data from Firestore once authentication is ready
    useEffect(() => {
        if (!db || !isAuthReady || !userId) { // Ensure userId is also available
            if (isAuthReady && !userId && loading) { // If auth is ready but no user, and still loading, stop loading
                setLoading(false);
            }
            return;
        }
        setLoading(true); // Set loading to true before fetching

        // Define the collection path for public data
        const deliveriesCollectionRef = collection(db, `artifacts/${appId}/public/data/deliveries`);
        const q = query(deliveriesCollectionRef);

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedDeliveries = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            setDeliveries(fetchedDeliveries);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching deliveries:", error);
            showMessage("Error al cargar las entregas.");
            setLoading(false);
        });

        return () => unsubscribe(); // Clean up the snapshot listener
    }, [db, isAuthReady, userId, appId]); // Added userId and appId as dependencies

    // Function to show a temporary message
    const showMessage = (msg) => {
        setMessage(msg);
        if (messageTimeoutRef.current) {
            clearTimeout(messageTimeoutRef.current);
        }
        messageTimeoutRef.current = setTimeout(() => {
            setMessage('');
        }, 3000); // Message disappears after 3 seconds
    };

    // Function to show a temporary LLM response message
    const showLlmResponseMessage = (msg) => {
        setLlmResponseMessage(msg);
        if (llmMessageTimeoutRef.current) {
            clearTimeout(llmMessageTimeoutRef.current);
        }
        llmMessageTimeoutRef.current = setTimeout(() => {
            setLlmResponseMessage('');
        }, 8000); // LLM message disappears after 8 seconds
    };

    // Function to parse CSV string
    const parseCSV = (csvString) => {
        const lines = csvString.trim().split('\n');
        if (lines.length === 0) return [];

        const header = lines[0].split(',').map(h => h.trim());
        const dataLines = lines.slice(1);

        const parsedData = dataLines.map(line => {
            const values = line.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/); 
            const row = {};
            header.forEach((key, index) => {
                row[key] = values[index] ? values[index].replace(/^"|"$/g, '').trim() : ''; 
            });
            return row;
        });
        return parsedData;
    };

    // Function to get coordinates from Google Geocoding API
    const getCoordinates = async (address) => {
        const encodedAddress = encodeURIComponent(address);
        const components = encodeURIComponent('locality:Mar del Plata|administrative_area:Buenos Aires|country:AR');
        const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&components=${components}&key=${GOOGLE_MAPS_API_KEY}`;

        try {
            const response = await fetch(url);
            const data = await response.json();

            if (data.status === 'OK' && data.results.length > 0) {
                const location = data.results[0].geometry.location;
                const isMarDelPlata = data.results[0].address_components.some(comp =>
                    comp.types.includes('locality') && comp.long_name === 'Mar del Plata'
                );

                if (isMarDelPlata) {
                    return { lat: location.lat, lng: location.lng };
                } else {
                    console.warn(`Address "${address}" geocoded outside Mar del Plata, skipping coordinates.`);
                    return null;
                }
            } else {
                console.error(`Geocoding error for "${address}":`, data.status, data.error_message);
                return null;
            }
        } catch (error) {
            console.error(`Error fetching coordinates for "${address}":`, error);
            return null;
        }
    };

    // Handle CSV parsing and geocoding, then display in table
    const handleParseAndGeocodeCSV = async () => {
        if (!userId) {
            showMessage("El usuario no está autenticado. Por favor, recarga la página.");
            return;
        }

        showMessage("Procesando CSV y obteniendo coordenadas...");
        const rawParsedData = parseCSV(csvInput);
        const geocodedData = [];

        for (const item of rawParsedData) {
            const nombre_reparto = item.nombre_reparto;
            const direccion_reparto = item.direccion_reparto;

            if (nombre_reparto && direccion_reparto) {
                const coords = await getCoordinates(direccion_reparto);

                geocodedData.push({
                    nombre_reparto: nombre_reparto,
                    direccion_reparto: direccion_reparto,
                    latitude: coords ? coords.lat : null,
                    longitude: coords ? coords.lng : null,
                    client_id: item.cliente_id || null,
                    rango_horario: item.rango_horario || null,
                    tarifa: item.tarifa ? parseFloat(item.tarifa) : null,
                    telefono_reparto: item.telefono_reparto || null,
                    user_id: userId 
                });
            }
        }
        setParsedDeliveries(geocodedData);
        setCsvInput(''); 
        showMessage("CSV procesado. Revisa la tabla y guarda en Firestore o genera CSV para Supabase.");
    };

    // Handle saving parsed deliveries to Firestore
    const handleSaveParsedDeliveries = async () => {
        if (!db || !userId) {
            showMessage("Firebase no está inicializado o el usuario no está autenticado.");
            return;
        }
        if (parsedDeliveries.length === 0) {
            showMessage("No hay entregas para guardar. Procesa un CSV primero.");
            return;
        }

        showMessage("Guardando entregas en Firestore...");
        const deliveriesCollectionRef = collection(db, `artifacts/${appId}/public/data/deliveries`);

        for (const delivery of parsedDeliveries) {
            try {
                await addDoc(deliveriesCollectionRef, { ...delivery, created_at: serverTimestamp() });
            } catch (e) {
                console.error("Error adding document: ", e);
                showMessage(`Error al guardar la entrega "${delivery.nombre_reparto}".`);
            }
        }
        setParsedDeliveries([]); 
        showMessage("Todas las entregas procesadas y guardadas en Firestore.");
    };

    // Function to generate delivery update using Gemini API
    const generateDeliveryUpdate = async (delivery) => {
        setLlmGenerating(true);
        setLlmResponseMessage(''); 

        const prompt = `Genera un mensaje de actualización de entrega conciso y amigable para el cliente.
        Detalles de la entrega:
        - Nombre del cliente: ${delivery.nombre_reparto}
        - Dirección de entrega: ${delivery.direccion_reparto}
        ${delivery.rango_horario ? `- Rango horario: ${delivery.rango_horario}` : ''}
        ${delivery.telefono_reparto ? `- Teléfono de contacto: ${delivery.telefono_reparto}` : ''}

        El mensaje debe ser breve, directo y útil para el cliente.`;

        let chatHistory = [];
        chatHistory.push({ role: "user", parts: [{ text: prompt }] });
        const payload = { contents: chatHistory };
        const apiKey = ""; 
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                showLlmResponseMessage(`✨ Mensaje de actualización: ${text}`);
            } else {
                showLlmResponseMessage('Error al generar el mensaje de actualización. Inténtalo de nuevo.');
                console.error("Unexpected LLM response structure:", result);
            }
        } catch (error) {
            showLlmResponseMessage('Error al conectar con la API de Gemini. Verifica tu conexión.');
            console.error("Error calling Gemini API:", error);
        } finally {
            setLlmGenerating(false);
        }
    };

    // Handle generating Supabase CSV from parsed CSV data
    const handleGenerateSupabaseCSV = () => {
        if (parsedDeliveries.length === 0) {
            showMessage("No hay entregas procesadas para generar el CSV de Supabase.");
            return;
        }
        setShowEmpresaIdModal(true); 
    };

    const confirmGenerateSupabaseCSV = () => {
        if (!empresaIdInput) {
            showMessage("Por favor, ingresa el código de empresa_id.");
            return;
        }

        const headers = ["nombre", "apellido", "direccion", "latitud", "longitud", "telefono", "email", "notas", "empresa_id", "estado"];
        const csvRows = [];
        csvRows.push(headers.join(',')); 

        parsedDeliveries.forEach(delivery => {
            const row = [
                `"${delivery.nombre_reparto.replace(/"/g, '""')}"`, 
                `""`, 
                `"${delivery.direccion_reparto.replace(/"/g, '""')}"`, 
                delivery.latitude !== null ? delivery.latitude : '',
                delivery.longitude !== null ? delivery.longitude : '',
                `"${(delivery.telefono_reparto || '').replace(/"/g, '""')}"`,
                `""`, 
                `""`, 
                `"${empresaIdInput.replace(/"/g, '""')}"`, 
                `true` 
            ];
            csvRows.push(row.join(','));
        });

        const csvString = csvRows.join('\n');
        const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.setAttribute('download', 'supabase_clientes.csv');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        showMessage("CSV para Supabase generado y descargado.");
        setShowEmpresaIdModal(false); 
        setEmpresaIdInput(''); 
    };

    // Handle adding a single client manually
    const handleAddManualClient = async () => {
        if (!userId) {
            showMessage("El usuario no está autenticado. Por favor, recarga la página.");
            return;
        }
        if (!newClientName.trim() || !newClientAddress.trim()) {
            showMessage("Por favor, ingresa el nombre y la dirección del cliente.");
            return;
        }

        showMessage("Verificando dirección y obteniendo coordenadas...");
        const coords = await getCoordinates(newClientAddress);

        if (coords) {
            setManualClientsToSave(prevClients => [
                ...prevClients,
                {
                    nombre_reparto: newClientName.trim(),
                    direccion_reparto: newClientAddress.trim(),
                    latitude: coords.lat,
                    longitude: coords.lng,
                    telefono_reparto: '', 
                    user_id: userId
                }
            ]);
            setNewClientName('');
            setNewClientAddress('');
            showMessage("Cliente agregado a la lista. Puedes agregar más o guardar.");
        } else {
            showMessage("Dirección inválida o fuera de Mar del Plata. Por favor, verifica.");
        }
    };

    // Handle saving manual clients to Firestore
    const handleSaveManualClientsToFirestore = () => {
        if (manualClientsToSave.length === 0) {
            showMessage("No hay clientes manuales para guardar.");
            return;
        }
        setShowManualEmpresaIdModal(true); 
    };

    const confirmSaveManualClientsToFirestore = async () => {
        if (!db || !userId) {
            showMessage("Firebase no está inicializado o el usuario no está autenticado.");
            return;
        }
        if (!manualEmpresaIdInput) {
            showMessage("Por favor, ingresa el código de empresa_id para los clientes manuales.");
            return;
        }

        showMessage("Guardando clientes manuales en Firestore...");
        const deliveriesCollectionRef = collection(db, `artifacts/${appId}/public/data/deliveries`);

        for (const client of manualClientsToSave) {
            try {
                await addDoc(deliveriesCollectionRef, {
                    nombre_reparto: client.nombre_reparto,
                    direccion_reparto: client.direccion_reparto,
                    latitude: client.latitude,
                    longitude: client.longitude,
                    telefono_reparto: client.telefono_reparto,
                    empresa_id: manualEmpresaIdInput, 
                    estado: true, 
                    created_at: serverTimestamp(),
                    user_id: client.user_id
                });
            } catch (e) {
                console.error("Error adding manual client document: ", e);
                showMessage(`Error al guardar el cliente "${client.nombre_reparto}".`);
            }
        }
        setManualClientsToSave([]); 
        setShowManualEmpresaIdModal(false); 
        setManualEmpresaIdInput(''); 
        showMessage("Todos los clientes manuales guardados en Firestore.");
    };

    // Handle generating CSV for manually added clients
    const handleGenerateManualClientsCsv = () => {
        if (manualClientsToSave.length === 0) {
            showMessage("No hay clientes manuales para exportar a CSV.");
            return;
        }
        setShowManualClientsCsvModal(true); 
    };

    const confirmGenerateManualClientsCsv = () => {
        if (!manualClientsCsvEmpresaIdInput) {
            showMessage("Por favor, ingresa el código de empresa_id para el CSV de clientes manuales.");
            return;
        }

        const headers = ["nombre", "apellido", "direccion", "latitud", "longitud", "telefono", "email", "notas", "empresa_id", "estado"];
        const csvRows = [];
        csvRows.push(headers.join(',')); 

        manualClientsToSave.forEach(client => {
            const row = [
                `"${client.nombre_reparto.replace(/"/g, '""')}"`, 
                `""`, 
                `"${client.direccion_reparto.replace(/"/g, '""')}"`, 
                client.latitude !== null ? client.latitude : '',
                client.longitude !== null ? client.longitude : '',
                `"${(client.telefono_reparto || '').replace(/"/g, '""')}"`,
                `""`, 
                `""`, 
                `"${manualClientsCsvEmpresaIdInput.replace(/"/g, '""')}"`, 
                `true` 
            ];
            csvRows.push(row.join(','));
        });

        const csvString = csvRows.join('\n');
        const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.setAttribute('download', 'clientes_manuales_supabase.csv');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        showMessage("CSV de clientes manuales generado y descargado.");
        setShowManualClientsCsvModal(false); 
        setManualClientsCsvEmpresaIdInput(''); 
    };


    if (loading && !isAuthReady) { // Show loading only if auth is not ready yet
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
                <div className="text-xl font-semibold text-gray-700">Inicializando autenticación...</div>
            </div>
        );
    }
     if (loading && isAuthReady && deliveries.length === 0) { // Show loading if auth is ready but data is still being fetched
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
                <div className="text-xl font-semibold text-gray-700">Cargando entregas...</div>
            </div>
        );
    }


    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col items-center p-4 font-inter text-gray-800">
            <div className="w-full max-w-4xl bg-white rounded-xl shadow-2xl p-8 space-y-8">
                <h1 className="text-4xl font-extrabold text-center text-indigo-700 mb-8">
                    Gestión de Entregas
                </h1>

                {message && (
                    <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-lg relative text-center mb-4 shadow-md">
                        {message}
                    </div>
                )}
                {llmResponseMessage && (
                    <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg relative text-center mb-4 shadow-md">
                        {llmResponseMessage}
                    </div>
                )}

                {/* Sección para agregar clientes manualmente */}
                <div className="border-t border-gray-200 pt-8 mt-8">
                    <h2 className="text-3xl font-bold text-center text-indigo-700 mb-6">
                        Agregar Clientes Manualmente
                    </h2>
                    <div className="space-y-4">
                        <input
                            type="text"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out shadow-sm"
                            placeholder="Nombre del cliente"
                            value={newClientName}
                            onChange={(e) => setNewClientName(e.target.value)}
                        />
                        <input
                            type="text"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out shadow-sm"
                            placeholder="Dirección del cliente (Ej: Av. Colón 1234, Mar del Plata)"
                            value={newClientAddress}
                            onChange={(e) => setNewClientAddress(e.target.value)}
                        />
                        <button
                            onClick={handleAddManualClient}
                            className="w-full bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:ring-offset-2"
                            disabled={!userId} // Disable if not authenticated
                        >
                            Agregar Cliente a la Lista
                        </button>
                    </div>

                    {manualClientsToSave.length > 0 && (
                        <div className="mt-8">
                            <h3 className="text-xl font-semibold text-gray-700 mb-4">
                                Clientes Agregados Manualmente (Pendientes de Guardar)
                            </h3>
                            <div className="overflow-x-auto rounded-lg shadow-md mb-6">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Nombre
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Dirección
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Latitud
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Longitud
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {manualClientsToSave.map((client, index) => (
                                            <tr key={index} className="hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                    {client.nombre_reparto}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                    {client.direccion_reparto}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                    {client.latitude !== null ? client.latitude.toFixed(4) : 'N/A'}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                    {client.longitude !== null ? client.longitude.toFixed(4) : 'N/A'}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                            <div className="flex flex-col md:flex-row gap-4">
                                <button
                                    onClick={handleSaveManualClientsToFirestore}
                                    className="flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                    disabled={manualClientsToSave.length === 0 || !userId}
                                >
                                    Guardar Clientes Manuales en Firestore
                                </button>
                                <button
                                    onClick={handleGenerateManualClientsCsv}
                                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                    disabled={manualClientsToSave.length === 0}
                                >
                                    Exportar CSV de Clientes Manuales
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Sección para cargar CSV */}
                <div className="border-t border-gray-200 pt-8 mt-8">
                    <h2 className="text-3xl font-bold text-center text-indigo-700 mb-6">
                        Cargar Clientes desde CSV
                    </h2>
                    <div className="space-y-6">
                        <div className="flex flex-col">
                            <label htmlFor="csvInput" className="text-lg font-semibold text-gray-700 mb-2">
                                Pega tu cadena de texto CSV aquí:
                            </label>
                            <textarea
                                id="csvInput"
                                className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[150px] shadow-sm"
                                value={csvInput}
                                onChange={(e) => setCsvInput(e.target.value)}
                                placeholder={`Ejemplo:\nid,cliente_id,nombre_reparto,direccion_reparto,rango_horario,tarifa,created_at,updated_at,telefono_reparto\n1,56a8dc7b-ba5f-4c46-90d7-3cd09ba271bb,Andapez,"Av. Vertiz 3250, B7603GGT Mar del Plata, Provincia de Buenos Aires, Argentina ",porton gris,10.00,2025-05-13 23:33:33.841028+00,2025-05-14 03:22:47.248641+00,`}
                            ></textarea>
                        </div>

                        <button
                            onClick={handleParseAndGeocodeCSV}
                            className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                            disabled={!userId} // Disable if not authenticated
                        >
                            Procesar CSV y Obtener Coordenadas
                        </button>
                    </div>
                </div>


                {parsedDeliveries.length > 0 && (
                    <div className="border-t border-gray-200 pt-8 mt-8">
                        <h2 className="text-3xl font-bold text-center text-indigo-700 mb-6">
                            Datos Procesados (CSV - Pendientes de Guardar)
                        </h2>
                        <div className="overflow-x-auto rounded-lg shadow-md mb-6">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Nombre Reparto
                                        </th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Dirección Reparto
                                        </th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Latitud
                                        </th>
                                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Longitud
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {parsedDeliveries.map((delivery, index) => (
                                        <tr key={index} className="hover:bg-gray-50">
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                {delivery.nombre_reparto}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                {delivery.direccion_reparto}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                {delivery.latitude !== null ? delivery.latitude.toFixed(4) : 'N/A'}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                                {delivery.longitude !== null ? delivery.longitude.toFixed(4) : 'N/A'}
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                        <div className="flex flex-col md:flex-row gap-4">
                            <button
                                onClick={handleSaveParsedDeliveries}
                                className="flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled={!db || !userId || parsedDeliveries.length === 0}
                            >
                                Guardar Entregas en Firestore
                            </button>
                            <button
                                onClick={handleGenerateSupabaseCSV}
                                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled={parsedDeliveries.length === 0}
                            >
                                Generar CSV para Supabase
                            </button>
                        </div>
                    </div>
                )}

                <div className="border-t border-gray-200 pt-8 mt-8">
                    <h2 className="text-3xl font-bold text-center text-indigo-700 mb-6">
                        Entregas Guardadas (en Firestore)
                    </h2>
                    {userId && (
                        <p className="text-sm text-gray-600 text-center mb-4">
                            ID de Usuario: <span className="font-mono text-indigo-600 break-all">{userId}</span>
                        </p>
                    )}

                    {deliveries.length === 0 && !loading ? ( // Show only if not loading and no deliveries
                        <p className="text-center text-gray-500 text-lg">
                            No hay entregas guardadas aún. ¡Agrega algunas!
                        </p>
                    ) : null}
                     {deliveries.length > 0 && (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {deliveries.map((delivery) => (
                                <div key={delivery.id} className="bg-white border border-gray-200 rounded-xl p-6 shadow-md hover:shadow-lg transition duration-200 ease-in-out flex flex-col">
                                    <h3 className="text-xl font-semibold text-indigo-800 mb-2">
                                        {delivery.nombre_reparto}
                                    </h3>
                                    <p className="text-gray-700 mb-1">
                                        <span className="font-medium">Dirección:</span> {delivery.direccion_reparto}
                                    </p>
                                    {delivery.latitude && delivery.longitude && (
                                        <p className="text-gray-700 mb-1">
                                            <span className="font-medium">Coordenadas:</span> Lat {delivery.latitude.toFixed(4)}, Lng {delivery.longitude.toFixed(4)}
                                        </p>
                                    )}
                                    {delivery.rango_horario && (
                                        <p className="text-gray-700 mb-1">
                                            <span className="font-medium">Rango Horario:</span> {delivery.rango_horario}
                                        </p>
                                    )}
                                    {delivery.tarifa !== null && typeof delivery.tarifa === 'number' && (
                                        <p className="text-gray-700 mb-1">
                                            <span className="font-medium">Tarifa:</span> ${delivery.tarifa.toFixed(2)}
                                        </p>
                                    )}
                                    {delivery.telefono_reparto && (
                                        <p className="text-gray-700 mb-1">
                                            <span className="font-medium">Teléfono:</span> {delivery.telefono_reparto}
                                        </p>
                                    )}
                                    <p className="text-gray-500 text-sm mt-2 flex-grow">
                                        Agregado: {delivery.created_at?.toDate().toLocaleString() || 'N/A'}
                                    </p>
                                    <button
                                        onClick={() => generateDeliveryUpdate(delivery)}
                                        className="mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transform transition duration-300 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                                        disabled={llmGenerating}
                                    >
                                        {llmGenerating ? 'Generando...' : '✨ Generar Mensaje de Actualización'}
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Empresa ID Modal for Supabase CSV (from CSV upload) */}
                {showEmpresaIdModal && (
                    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md space-y-6">
                            <h2 className="text-2xl font-bold text-indigo-700 text-center">
                                Ingresar Código de Empresa (para CSV Supabase)
                            </h2>
                            <p className="text-gray-700 text-center">
                                Por favor, introduce el `empresa_id` que se aplicará a todas las entradas del CSV de Supabase.
                            </p>
                            <input
                                type="text"
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out"
                                value={empresaIdInput}
                                onChange={(e) => setEmpresaIdInput(e.target.value)}
                                placeholder="Ej: tu-empresa-id-uuid"
                            />
                            <div className="flex justify-end gap-4">
                                <button
                                    onClick={() => setShowEmpresaIdModal(false)}
                                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Cancelar
                                </button>
                                <button
                                    onClick={confirmGenerateSupabaseCSV}
                                    className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Generar CSV
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* Empresa ID Modal for Manual Clients (for Firestore save) */}
                {showManualEmpresaIdModal && (
                    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md space-y-6">
                            <h2 className="text-2xl font-bold text-indigo-700 text-center">
                                Ingresar Código de Empresa (para Guardar Clientes Manuales)
                            </h2>
                            <p className="text-gray-700 text-center">
                                Por favor, introduce el `empresa_id` que se aplicará a los clientes agregados manualmente para guardar en Firestore.
                            </p>
                            <input
                                type="text"
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out"
                                value={manualEmpresaIdInput}
                                onChange={(e) => setManualEmpresaIdInput(e.target.value)}
                                placeholder="Ej: tu-empresa-id-uuid"
                            />
                            <div className="flex justify-end gap-4">
                                <button
                                    onClick={() => setShowManualEmpresaIdModal(false)}
                                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Cancelar
                                </button>
                                <button
                                    onClick={confirmSaveManualClientsToFirestore}
                                    className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Guardar Clientes
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* Empresa ID Modal for Manual Clients CSV Export */}
                {showManualClientsCsvModal && (
                    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md space-y-6">
                            <h2 className="text-2xl font-bold text-indigo-700 text-center">
                                Ingresar Código de Empresa (para Exportar CSV Manual)
                            </h2>
                            <p className="text-gray-700 text-center mb-1">
                                Por favor, introduce el `empresa_id` que se aplicará a los clientes manuales en el archivo CSV.
                            </p>
                             <input
                                type="text"
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out"
                                value={manualClientsCsvEmpresaIdInput}
                                onChange={(e) => setManualClientsCsvEmpresaIdInput(e.target.value)}
                                placeholder="Escribe o selecciona un ID de empresa"
                            />
                            <div className="mt-2">
                                <label htmlFor="empresaIdSelectManualCsv" className="block text-sm font-medium text-gray-700 mb-1">
                                    O selecciona una empresa existente:
                                </label>
                                <select
                                    id="empresaIdSelectManualCsv"
                                    className="w-full p-3 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 ease-in-out"
                                    value={manualClientsCsvEmpresaIdInput}
                                    onChange={(e) => setManualClientsCsvEmpresaIdInput(e.target.value)}
                                >
                                    <option value="">-- Selecciona una empresa --</option>
                                    {predefinedCompanies.map(company => (
                                        <option key={company.id} value={company.id}>
                                            {company.name} ({company.id.substring(0,8)}...)
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className="flex justify-end gap-4 pt-4">
                                <button
                                    onClick={() => setShowManualClientsCsvModal(false)}
                                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Cancelar
                                </button>
                                <button
                                    onClick={confirmGenerateManualClientsCsv}
                                    className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out"
                                >
                                    Generar CSV
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default App;
